plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("kotlinx-serialization")
    id("kotlin-parcelize")
    id("com.google.devtools.ksp")
    id("com.mikepenz.aboutlibraries.plugin")
}

static def buildTime() {
    def t = new Date().time / 1000
    return (long) t
}

static def releaseTime() {
    return new Date().format("yy.MMddHH", TimeZone.getTimeZone("GMT+8"))
}

def version = "1." + releaseTime()
def gitCommits = Integer.parseInt('git rev-list HEAD --count'.execute().text.trim())

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace 'com.github.jing332.tts_server_android'
    defaultConfig {
        applicationId 'com.github.jing332.tts_server_android'
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode gitCommits
        versionName version

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
            arg("room.incremental", "true")
            arg("room.expandProjection", "true")
        }

        // 读取strings.xml所在文件夹 获得应用支持的语言
        tasks.register('buildTranslationArray') {
            def defaultCode = "zh-CN"
            def foundLocales = new StringBuilder()
            foundLocales.append("new String[]{")

            fileTree("src/main/res").visit { details ->
                if (details.file.path.endsWith("strings.xml")) {
                    def path = details.file.parent.replaceAll('\\\\', "/")
                    def languageCode = path.tokenize('/').last().replaceAll('values-', '').replaceAll('-r', '-')
                    languageCode = (languageCode == "values") ? defaultCode : languageCode;
                    foundLocales.append("\"").append(languageCode).append("\"").append(",")
                }
            }
            foundLocales.append("}")
            def foundLocalesString = foundLocales.toString().replaceAll(',}', '}')
            buildConfigField "String[]", "TRANSLATION_ARRAY", foundLocalesString
        }
        preBuild.dependsOn buildTranslationArray
        buildConfigField "long", "BUILD_TIME", buildTime().toString()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            //签名文件 从local.properties取值
            Properties pro = new Properties()
            InputStream input = project.rootProject.file("local.properties").newDataInputStream()
            pro.load(input)
            storeFile file(pro.getProperty("KEY_PATH"))
            storePassword pro.getProperty("KEY_PASSWORD")
            keyAlias pro.getProperty("ALIAS_NAME")
            keyPassword pro.getProperty("ALIAS_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
            applicationIdSuffix ".debug"
            versionNameSuffix "_debug"
            splits.abi.enable = false
            splits.density.enable = false
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/INDEX.LIST', 'META-INF/*.md']
        }
    }


    // 分别打包APK 原版 和 dev共存版
    flavorDimensions += "version"
    productFlavors {
        app {
            dimension = "version"
        }
        dev {
            dimension = "version"
            applicationIdSuffix ".dev"
        }
    }

    splits {
        abi {
            enable true
            reset()

            include 'x86_64', 'x86', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    kotlin {
        jvmToolchain(17)

        /*sourceSets.all {
            languageSettings {
                languageVersion = "2.0"
            }
        }*/
    }

    // 修改apk文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //noinspection GrDeprecatedAPIUsage
            def abiName = output.getFilter(com.android.build.OutputFile.ABI)
            if (abiName == null)
                output.outputFileName = "TTS-Server-v${variant.versionName}.apk"
            else
                output.outputFileName = "TTS-Server-v${variant.versionName}_${abiName}.apk"
        }
    }

//    sourceSets {
//        main {
//            java {
//                exclude 'tts_server_android/ui'
//            }
//        }
//    }

    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.composeComplile.get()
    }
}

dependencies {
    coreLibraryDesugaring(libs.desugar)
    api(project(":lib-common"))
    implementation(project(":lib-gojni"))
    implementation(project(":lib-compose"))
    implementation(project(":lib-script"))
    implementation(project(":lib-tts"))


    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation(libs.logging)
    implementation(libs.slf4j.api)
//    implementation(libs.slf4j.simple)
    implementation(libs.logback.android)

    implementation libs.activityKtx
    implementation libs.bundles.andorid.base
//    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'


    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.serialization.json

    implementation(libs.bundles.markwon)
    implementation(libs.bundles.ui)

    // Code Editor
    implementation(libs.bundles.codeEditor)
    implementation(libs.bundles.network)


    implementation(libs.bundles.room)
    ksp(libs.roomCompiler)


    implementation(libs.splitties.systemservices)
    implementation(libs.splitties.appctx)
    implementation(libs.hutool.crypto)


    implementation(libs.bundles.media3)

    implementation 'me.rosuh:AndroidFilePicker:1.0.1'
    implementation("com.hankcs:hanlp:portable-1.8.4")

    // https://github.com/gyf-dev/ImmersionBar
    implementation 'com.geyifeng.immersionbar:immersionbar:3.2.2'
    implementation 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.2'


    implementation(libs.bundles.about)

    implementation libs.bundles.accompanist



    implementation(libs.bundles.lifecycle)

    def composeBom = platform(libs.compose.bom)
//    def composeBom = platform("dev.chrisbanes.compose:compose-bom:2024.01.00-alpha01")
    implementation composeBom
    androidTestImplementation composeBom

    implementation(libs.bundles.compose)
    implementation(libs.bundles.compose.material3)

    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // Logcat (Debug)
//    debugImplementation 'com.github.getActivity:Logcat:11.2'

    testImplementation(libs.junit)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)
}
